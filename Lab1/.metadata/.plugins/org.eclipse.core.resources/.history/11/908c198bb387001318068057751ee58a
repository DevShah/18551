package s14_18551.lab1;

import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.android.Utils;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

import android.os.Bundle;
import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.ImageView;

public class ImageProcessActivity extends Activity {

	private static final String TAG = "ImageProcess";
	
	
	private BaseLoaderCallback mLoaderCallback = new BaseLoaderCallback(this) {
	    @Override
	    public void onManagerConnected(int status) {
	        switch (status) {
	            case LoaderCallbackInterface.SUCCESS:
	            {
	                Log.i(TAG, "OpenCV loaded successfully");
	            } break;
	            default:
	            {
	                super.onManagerConnected(status);
	            } break;
	        }
	    }
	};
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_image_process);
		OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION_2_4_6, this, mLoaderCallback);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.image_process, menu);
		return true;
	}
	
	public void blur(View view){
		Log.i(TAG, "in blur\n");
		//grab image by id
		ImageView to_process = (ImageView) findViewById(R.id.image_we_will_process);
		//get the bitmap, convert to mat, blur
		Bitmap image_bitmap = ((BitmapDrawable) to_process.getDrawable()).getBitmap();
		int width = image_bitmap.getWidth();
		int height = image_bitmap.getHeight();
		Mat image_mat = new Mat(new Size(width,height), CvType.CV_32FC1);
		Utils.bitmapToMat(image_bitmap, image_mat);
		Imgproc.blur(image_mat, image_mat, new Size(25,25));
		//replace the image
		Utils.matToBitmap(image_mat, image_bitmap);
		to_process.setImageBitmap(image_bitmap);
		
		Log.i(TAG, "returning from blur\n");
		return;
	}
	
	public void canny(View view){
		Log.i(TAG, "in canny\n");
		//grab image by id
		ImageView to_process = (ImageView) findViewById(R.id.image_we_will_process);
		//get the bitmap, convert to mat, blur
		Bitmap image_bitmap = ((BitmapDrawable) to_process.getDrawable()).getBitmap();
		int width = image_bitmap.getWidth();
		int height = image_bitmap.getHeight();
		Mat image_mat = new Mat(new Size(width,height), CvType.CV_32FC1);
		Utils.bitmapToMat(image_bitmap, image_mat);
		Imgproc.Canny(image_mat, image_mat, 80, 90);
		//replace the image
		Utils.matToBitmap(image_mat, image_bitmap);
		to_process.setImageBitmap(image_bitmap);
		
		Log.i(TAG, "returning from canny\n");
		return;
	}
	
	public void reset(View view){
		ImageView to_process = (ImageView) findViewById(R.id.image_we_will_process);
		Bitmap refreshed = BitmapFactory.decodeResource(getResources(), R.drawable.group_pic_2);
		to_process.setImageBitmap(refreshed);
	}

}
